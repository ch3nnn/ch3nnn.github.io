<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ch3nnn个人博客</title>
    <link>https://ch3nnn.github.io/</link>
    
    <atom:link href="https://ch3nnn.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>小站主要用来分享和记录学习经验,教程,记录个人生活的点滴以及一些随笔.</description>
    <pubDate>Mon, 02 Jan 2023 15:30:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>这些最常用的 Go CLI 命令，新手 Gopher 应该掌握</title>
      <link>https://ch3nnn.github.io/2023/01/02/%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84GoCLI%E5%91%BD%E4%BB%A4/</link>
      <guid>https://ch3nnn.github.io/2023/01/02/%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84GoCLI%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Mon, 02 Jan 2023 02:28:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;本文将介绍一些最基本的 Go 命令行命令。如果你刚接触 Go 语言，那你有必要记住它们，因为这些命令是 Go 开发者日常工作中所必备的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go version&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开始 Go 项目前，我们应该确保开发机上已经安装好了</description>
        
      
      
      
      <content:encoded><![CDATA[<p>本文将介绍一些最基本的 Go 命令行命令。如果你刚接触 Go 语言，那你有必要记住它们，因为这些命令是 Go 开发者日常工作中所必备的。</p><p><strong>Go version</strong></p><p>开始 Go 项目前，我们应该确保开发机上已经安装好了 Go 编译器。这可以通过 <a href="https://go.dev/doc/install">https://go.dev/doc/install</a> 进行下载安装。</p><p>通过执行以下命令可以查看安装的 Go 版本信息。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> version</span><br><span class="line"><span class="keyword">go</span> version go1<span class="number">.18</span> darwin/amd64</span><br></pre></td></tr></table></figure><p><strong>Go env</strong></p><p>如果我们可能想查看一些 Go 相关的环境变量，例如 GOROOT 或者 GOPATH。你可以执行这个命令。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> env</span><br></pre></td></tr></table></figure><p>当你想对某个环境变量进行更改，例如修改 Go 代理，你可以这样做。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.io,direct</span></span><br></pre></td></tr></table></figure><p><strong>go mod</strong></p><p>在你开始建立第一个 Go 程序时，在项目根目录下，你应该运行这样的命令。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> mod init &lt;your project name&gt;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> mod init demo/firstProject</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时，项目根目录将增加 go.mod 文件，它的内容如下</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ cat <span class="keyword">go</span>.mod </span><br><span class="line">module demo/firstProject</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.18</span></span><br></pre></td></tr></table></figure><p>如果你有其他语言的经验，那么 go.mod 类似于 Python 中的 requirements.txt，Java 中的 pom.xml，它用于管理项目的依赖包。</p><p><strong>go get</strong></p><p>当项目中有引入外部库，应该执行 go get 命令。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get &lt;<span class="keyword">package</span> name&gt;</span><br></pre></td></tr></table></figure><p>例如我们需要使用日志库 logrus，执行以下命令会将该库源代码下载至 mod cache 中，并将在 go.mod  文件中记录该库的依赖情况。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get github.com/sirupsen/logrus</span><br><span class="line">$ cat <span class="keyword">go</span>.mod </span><br><span class="line">module demo/firstProject</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.18</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">        github.com/sirupsen/logrus v1<span class="number">.9</span><span class="number">.0</span> <span class="comment">// indirect</span></span><br><span class="line">        golang.org/x/sys v0<span class="number">.0</span><span class="number">.0</span><span class="number">-20220715151400</span>-c0bba94af5f8 <span class="comment">// indirect</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>go run&#x2F;build</strong></p><p>当我们已经编写了一些 Go 代码，并希望在本地运行它以查看程序表现是否符合预期。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> run .</span><br></pre></td></tr></table></figure><p>当然，我们也可以使用 go build 命令。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> build -o &lt;name of binary&gt; &lt;packages&gt;</span><br><span class="line">$ ./&lt;name of binary&gt;</span><br></pre></td></tr></table></figure><p>两种命令方式都需要编译的过程，实质并无什么区别。go run只是将编译得到的可执行文件执行后销毁，而 go build 是将可执行文件保留下来，并不直接执行。</p><p><strong>go test</strong></p><p>如果你编写了一堆单元测试代码（在以_test.go 结尾的文件中），你想运行它们，只需要执行以下语句。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> test</span><br></pre></td></tr></table></figure><p><strong>go mod tidy</strong></p><p>当项目中尝试引入过多个三方包，而其中部分包我们并不需要了，那就应该从代码依赖中删除。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure><p><strong>go vet</strong></p><p>当完成了功能开发后，应该使用以下命令来帮助我们检测程序中可能存在问题的代码。更多 vet 知识可以查看文章Go工具之vet——静态诊断器。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> vet</span><br></pre></td></tr></table></figure><p><strong>go fmt</strong></p><p>当完成了功能开发，准备提交代码到公共仓库。我们应该确保项目代码遵循统一的官方代码风格。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">fmt</span></span></span><br></pre></td></tr></table></figure><p>当然更好的方式其实是使用检查套件，具体可以参见文章Gopher一定要会的代码自动化检查。</p><p><strong>总结</strong></p><p>Go 提供了非常多简单又实用的命令行工具，本文仅介绍了一些在项目开发中最可能被用到的命令。</p><p>想获取更多 Go 命令？可以执行 $ go 或者 $ go tool 获取命令列表，执行 go help <command>可了解特定命令的更多信息。</p>]]></content:encoded>
      
      
      
      <category domain="https://ch3nnn.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ch3nnn.github.io/2023/01/02/%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84GoCLI%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「回顾2022，展望2023」 —— 年终总结</title>
      <link>https://ch3nnn.github.io/2023/01/01/%E6%88%91%E7%9A%842022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <guid>https://ch3nnn.github.io/2023/01/01/%E6%88%91%E7%9A%842022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sun, 01 Jan 2023 15:41:48 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;致自己：折腾不息 · 乐此不疲!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;22-年收获&quot;&gt;&lt;a href=&quot;#22-年收获&quot; class=&quot;headerlink&quot; title=&quot;22 年收获&quot;&gt;&lt;/a&gt;22 年收获&lt;/h2&gt;&lt;p&gt;&lt;st</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>致自己：折腾不息 · 乐此不疲!</p></blockquote><h2 id="22-年收获"><a href="#22-年收获" class="headerlink" title="22 年收获"></a>22 年收获</h2><p><strong>技术上</strong></p><ul><li>编程语言方面<ul><li>Golang: 从开始学习到现在的一年时间里, 前前后后也写了些代码, 其中包括业余时间的, 也有产品项目中的. 在摸滚打爬中对于Golang的使用算是勉强达到了较为熟练的状态.</li></ul></li><li>开源贡献方向<ul><li>jaywcjlove&#x2F;reference <a href="https://github.com/jaywcjlove/reference">为开发人员分享快速参考备忘清单(速查表)</a></li><li>liangliangyy&#x2F;DjangoBlog <a href="https://github.com/liangliangyy/DjangoBlog">基于Django的博客系统</a></li><li>Lcry&#x2F;a-sheep-assistant <a href="https://github.com/Lcry/a-sheep-assistant">羊了个羊助手，羊了个羊一键闯关</a></li></ul></li></ul><p><strong>生活上</strong></p><ul><li>疫情防控<br>保持绿码, 小🐑人中… 还以为自己就是那位”天选之子”(又开始吹牛皮).</li><li>生活情感<br>端午节前带女朋友回家, 父母都感觉很满意, 生活很幸福, 偶尔会吵吵嘴毕竟生活需要增加些乐趣嘛(哈哈哈).</li></ul><p><strong>工作上</strong></p><ul><li>从互联网医疗到工控安全行业, 工作内容没有任何变化(就是撸码搬砖🧱)</li></ul><h2 id="23年展望"><a href="#23年展望" class="headerlink" title="23年展望"></a>23年展望</h2><p>2023年是新的一年，新的一年就会有新的flag。新的一年我要以下几件事:</p><ul><li>保持持续学习的激情、态度</li><li>持续开源贡献</li><li>真的需要运动(感觉自己要废了)</li><li>感情上还是需要更加谦让</li><li>…</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul><li>最后, 最后, Happy New Year … 或者至少, 平平安安度过新的一年</li><li>各位, 继续加油吧! 冲冲冲!</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://ch3nnn.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/">年度总结</category>
      
      
      <comments>https://ch3nnn.github.io/2023/01/01/%E6%88%91%E7%9A%842022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
