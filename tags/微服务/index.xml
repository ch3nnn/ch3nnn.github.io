<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>微服务 on Ch3nnn!Blog</title><link>https://blog.ch3nnn.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><description>Recent content in 微服务 on Ch3nnn!Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 07 Mar 2025 11:24:06 +0800</lastBuildDate><atom:link href="https://blog.ch3nnn.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>微服务-分布式事务</title><link>https://blog.ch3nnn.cn/posts/2025/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link><pubDate>Fri, 07 Mar 2025 11:24:06 +0800</pubDate><guid>https://blog.ch3nnn.cn/posts/2025/%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid><description>&lt;h2 id="微服务-分布式事务">微服务-分布式事务&lt;/h2>
&lt;h3 id="一微服务架构下的分布式事务挑战">一、微服务架构下的分布式事务挑战&lt;/h3>
&lt;p>在微服务架构中，每个服务独立拥有数据库（Database per Service），跨服务的事务操作面临以下核心问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据一致性&lt;/strong>：跨服务的业务操作无法通过本地事务保证原子性&lt;/li>
&lt;li>&lt;strong>通信可靠性&lt;/strong>：网络分区、服务宕机等场景下的异常处理&lt;/li>
&lt;li>&lt;strong>性能损耗&lt;/strong>：传统两阶段提交（2PC）方案存在同步阻塞问题&lt;/li>
&lt;/ul>
&lt;h3 id="二主流分布式事务解决方案">二、主流分布式事务解决方案&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Saga 模式&lt;/strong>（最终一致性）
&lt;ul>
&lt;li>通过补偿机制回滚分布式事务&lt;/li>
&lt;li>适用场景：长事务、高吞吐量系统&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>TCC 模式&lt;/strong>（Try-Confirm-Cancel）
&lt;ul>
&lt;li>业务层实现资源预留/确认/取消三阶段&lt;/li>
&lt;li>适用场景：资金类强一致性要求场景&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>XA 规范&lt;/strong>（强一致性）
&lt;ul>
&lt;li>依赖数据库层的两阶段提交协议&lt;/li>
&lt;li>缺点：同步阻塞、数据库兼容性问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="三dtm-分布式事务框架go-语言实现">三、DTM 分布式事务框架（Go 语言实现）&lt;/h3>
&lt;h4 id="核心特性">核心特性&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#000;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">// 典型 Saga 事务示例（Go 语言）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#505050">// 添加子事务，正向操作为url， 补偿操作为url&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dtmcli.&lt;span style="color:#721045">SagaProcess&lt;/span>(saga, &lt;span style="color:#5317ac">func&lt;/span> (saga &lt;span style="color:#00538b">*&lt;/span>dtmcli.Saga) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saga.&lt;span style="color:#721045">Add&lt;/span>(&lt;span style="color:#2544bb">&amp;#34;http://service1/api/trans&amp;#34;&lt;/span>, &lt;span style="color:#2544bb">&amp;#34;http://service1/api/compensate&amp;#34;&lt;/span>, &lt;span style="color:#00538b">&amp;amp;&lt;/span>req1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> saga.&lt;span style="color:#721045">Add&lt;/span>(&lt;span style="color:#2544bb">&amp;#34;http://service2/api/trans&amp;#34;&lt;/span>, &lt;span style="color:#2544bb">&amp;#34;http://service2/api/compensate&amp;#34;&lt;/span>, &lt;span style="color:#00538b">&amp;amp;&lt;/span>req2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>&lt;strong>多模式支持&lt;/strong>：Saga/TCC/XA/消息事务&lt;/li>
&lt;li>&lt;strong>多语言 SDK&lt;/strong>：原生支持 Go、Java、Python 等&lt;/li>
&lt;li>&lt;strong>事务屏障&lt;/strong>：自动处理空补偿/悬挂问题&lt;/li>
&lt;li>&lt;strong>高可用架构&lt;/strong>：支持 MySQL/Redis 等多种存储后端&lt;/li>
&lt;/ol>
&lt;h4 id="技术优势">技术优势&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>性能指标&lt;/strong>：单事务处理时间 &amp;lt; 5ms（SSD 环境）&lt;/li>
&lt;li>&lt;strong>部署方案&lt;/strong>：支持 Kubernetes 容器化部署&lt;/li>
&lt;li>&lt;strong>可视化监控&lt;/strong>：内置事务状态跟踪和管理界面&lt;/li>
&lt;/ul>
&lt;h3 id="四实战案例电商订单系统">四、实战案例：电商订单系统&lt;/h3>
&lt;p>&lt;strong>场景&lt;/strong>：创建订单（库存扣减 + 订单生成）&lt;/p>
&lt;pre tabindex="0">&lt;code>// DTM + go-zero 框架实现分布式事务
func (l *CreateLogic) Create(req *types.OrderCreateReq) (resp *types.OrderCreateResp, err error) {
	// 获取订单服务地址
	orderRpcTarget, err := l.svcCtx.Config.OrderRpcConf.BuildTarget()
	if err != nil {
		return nil, fmt.Errorf(&amp;#34;下单异常超时&amp;#34;)
	}

	// 获取库存服务地址
	stockRpcTarget, err := l.svcCtx.Config.StockRpcConf.BuildTarget()
	if err != nil {
		return nil, fmt.Errorf(&amp;#34;下单异常超时&amp;#34;)
	}

	// 创建一个saga事务
	m := dtmgrpc.NewSagaGrpc(dtmServer, dtmgrpc.MustGenGid(dtmServer)).
		// 订单服务
		Add(
			orderRpcTarget+orderpb.Order_Create_FullMethodName, // 创建订单
			orderRpcTarget+orderpb.Order_CreateRollback_FullMethodName, // 补偿操作-创建订单回滚
			&amp;amp;order.CreateReq{
				UserId: req.UserID,
				GoodsId: req.GoodsID,
				Num: req.Num,
			},
		).
		// 库存服务
		Add(
			stockRpcTarget+stockpb.Stock_Deduct_FullMethodName, // 扣减库存
			stockRpcTarget+stockpb.Stock_DeductRollback_FullMethodName, // 补偿操作-扣减库存回滚
			&amp;amp;stock.DeductReq{
				GoodsId: req.GoodsID,
				Num: req.Num,
			},
		)

	// 提交数据到dtm
	err = m.Submit()
	logger.FatalIfError(err)

	return
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>实战完整源代码 &lt;a href="https://github.com/ch3nnn/dtm-zero">https://github.com/ch3nnn/dtm-zero&lt;/a>&lt;/p></description></item><item><title>微服务-API网关对比和选型</title><link>https://blog.ch3nnn.cn/posts/2023/%E5%BE%AE%E6%9C%8D%E5%8A%A1api%E7%BD%91%E5%85%B3%E5%AF%B9%E6%AF%94%E5%92%8C%E9%80%89%E5%9E%8B/</link><pubDate>Tue, 04 Apr 2023 16:45:00 +0000</pubDate><guid>https://blog.ch3nnn.cn/posts/2023/%E5%BE%AE%E6%9C%8D%E5%8A%A1api%E7%BD%91%E5%85%B3%E5%AF%B9%E6%AF%94%E5%92%8C%E9%80%89%E5%9E%8B/</guid><description>&lt;h2 id="什么是微服务">什么是微服务&lt;/h2>
&lt;p>微服务架构（通常简称为微服务）是指开发应用所用的一种架构形式。通过微服务，可将大型应用分解成多个独立的组件，其中每个组件都有各自的责任领域。
在处理一个用户请求时，基于微服务的应用可能会调用许多内部微服务来共同生成其响应。微服务是互联网业务发展的结果，互联网业务的飞速发展导致系统的架构也在不断地发生变化，总体来说，系统的架构大致经历了：单体应用架构—&amp;gt;
SOA 架构—&amp;gt;微服务架构 的演变，具体发展历程和各自的优缺点如下表所示。
&lt;img src="https://cdn.ch3nnn.cn/img202304041708571.png" alt="">&lt;/p>
&lt;p>因此，微服务是互联网发展的必然结果，很多传统公司的系统架构也在逐步微服务化。但是，随着互联网业务的发展，API 的数量也在剧增，使用网关对API统一管理也将面临挑战，选择一个更强大的
API 网关，可以有效地增强系统的监控、容灾、鉴权和限流等能力。&lt;/p>
&lt;h2 id="什么是微服务网关">什么是微服务网关&lt;/h2>
&lt;p>&lt;strong>API网关是一个服务器，是系统的唯一入口。&lt;/strong> 从面向对象设计的角度看，它与外观模式类似。&lt;/p>
&lt;p>API网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、协议转换、限流熔断、静态响应处理。&lt;/p>
&lt;p>&lt;strong>API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。&lt;/strong> 通常，网关也是提供REST/HTTP的访问API。
&lt;img src="https://cdn.ch3nnn.cn/img202304162258745.png" alt="">&lt;/p>
&lt;p>微服务网关作为微服务后端服务的统一入口，它可以统筹管理后端服务，主要分为数据平面和控制平面：&lt;/p>
&lt;p>数据平面主要功能是接入用户的HTTP请求和微服务被拆分后的聚合。使用微服务网关统一对外暴露后端服务的API和契约，路由和过滤功能正是网关的核心能力模块。另外，微服务网关可以实现拦截机制和专注跨横切面的功能，包括协议转换、安全认证、熔断限流、灰度发布、日志管理、流量监控等。
控制平面主要功能是对后端服务做统一的管控和配置管理。例如，可以控制网关的弹性伸缩；可以统一下发配置；可以对网关服务添加标签；可以在微服务网关上通过配置Swagger功能统一将后端服务的API契约暴露给使用方，完成文档服务，提高工作效率和降低沟通成本。&lt;/p>
&lt;p>&lt;strong>微服务遇到的挑战&lt;/strong>&lt;/p>
&lt;p>微服务网关应该首先要具备 API 路由能力，微服务数量变多，API 数量急剧增加，网关还可以根据具体的场景作为流量过滤器来使用，以提供某些额外可选功能，因此对微服务
API Gateway 提出了更高要求，比如：&lt;/p>
&lt;ul>
&lt;li>可观测性：在以往的单体应用中，排查问题往往通过查看日志定位错误信息和异常堆栈；但是在微服务架构中服务繁多，出现问题时的问题定位变得非常困难；因此，如何监控微服务的运行状况、当出现异常时能快速给出报警，这给开发人员带来很大挑战。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>鉴权认证：而微服务架构下，一个应用会被拆分成若干个微应用，每个微应用都需要对访问进行鉴权，每个微应用都需要明确当前访问用户以及其权限。尤其当访问来源不只是浏览器，还包括其它服务的调用时，单体应用架构下的鉴权方式就不是特别合适了。在微服务架构下，要考虑外部应用接入的场景、用户 -&lt;/p>
&lt;ul>
&lt;li>服务的鉴权、服务 - 服务的鉴权等多种鉴权场景。&lt;/li>
&lt;li>系统稳定性：若大量请求超过微服务的处理能力时，可能会将服务打垮，甚至产生雪崩效应、影响系统的整体稳定性。&lt;/li>
&lt;li>服务发现：微服务的分散管理，让微服务的负载均衡的实现也更具有挑战性。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>解决方案&lt;/strong>&lt;/p>
&lt;p>API 网关作为客户端和服务端的中间桥梁，为微服务系统提供统一的管理机制：
除了基础的请求分发、API 管理和条件路由等功能，还包括身份验证、监控报警、调用链追踪、负载均衡、限流隔离和熔断降级。身份认证：下图表示的是微服务联合
API 网关如何进行身份认证的，由图可见所有请求都通过网关，从而有效地隐藏了微服务。&lt;/p>
&lt;p>&lt;img src="https://cdn.ch3nnn.cn/img202304041714043.png" alt="">
监控报警/调用链追踪：
API 作为客户端和服务端的中间桥梁，是微服务监控的最好载体，API 网关监控功能的主要职责是及时发现网关以及后端服务器的连接异常，在 API
的监控平台上面用户可以随时查看日志信息，监控信息，调用链等等，并且主机发生的任何异常都会自动报警到控制台。有些网关甚至可以做到给客户端和服务端双向报警。&lt;/p>
&lt;p>&lt;img src="https://cdn.ch3nnn.cn/img202304041714673.png" alt="">&lt;/p>
&lt;p>限流隔离/熔断降级：
随着互联网业务规模的增加，系统的并发度增高，多个服务之间相互调用链路，一条核心链路往往可能调用十个服务。如果在链路中，某个服务的
rt（响应时间）急剧上升，上游服务不断请求，造成恶性循环，上游等待结果线程数越多，使得更上游服务阻塞最终整条链路无法使用，从而导致服务雪崩，所以对入口流量进行整治管理是很有必要的，下图表示微服务系统是如何结合
API 网关进行限流隔离和熔断降级的。&lt;/p>
&lt;p>&lt;img src="https://cdn.ch3nnn.cn/img202304041715894.png" alt="">&lt;/p>
&lt;h2 id="主流网关选择">主流网关选择&lt;/h2>
&lt;p>在微服务领域，有许多开源网关实现，有 NGINX、Kong、Apache APISIX 和 Envoy 等，Java 技术栈的有 Netfilx Zuul、Spring Cloud Gateway、Soul 等。或许你会问“有了
NGINX 和 Kong，为什么还需要 Apache APISIX？” ，下面做个简单对比。&lt;/p></description></item></channel></rss>