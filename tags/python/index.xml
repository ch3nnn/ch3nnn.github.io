<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Ch3nnn!Blog</title><link>https://blog.ch3nnn.cn/tags/python/</link><description>Recent content in Python on Ch3nnn!Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 23 Sep 2021 03:02:00 +0800</lastBuildDate><atom:link href="https://blog.ch3nnn.cn/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python枚举类自定义状态</title><link>https://blog.ch3nnn.cn/posts/2021/python%E6%9E%9A%E4%B8%BE%E7%B1%BB%E8%87%AA%E5%AE%9A%E4%B9%89%E7%8A%B6%E6%80%81/</link><pubDate>Thu, 23 Sep 2021 03:02:00 +0800</pubDate><guid>https://blog.ch3nnn.cn/posts/2021/python%E6%9E%9A%E4%B8%BE%E7%B1%BB%E8%87%AA%E5%AE%9A%E4%B9%89%E7%8A%B6%E6%80%81/</guid><description>&lt;ul>
&lt;li>枚举类不支持实例化；&lt;/li>
&lt;li>成员的值不能在类的外部做任何修改，每个成员都有`name`,`value`两个属性，其中`name`为该枚举值的名称，`value`为该枚举值的内容；&lt;/li>
&lt;li>定义枚举时，成员名称不允许重复，但在默认情况下，不同的成员值允许相同，两个相同值的成员，第二个成员的名称将会被视作第一个成员的别名，若要限制不能定义相同值的成员。可以使用装饰器`@unique`；&lt;/li>
&lt;li>枚举支持迭代器，可以遍历枚举成员；如果枚举有值重复的成员，循环遍历枚举时只获取值重复成员的第一个成员，若想把值重复的成员也遍历出来，要用枚举的一个特殊属性:`__members__`；&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>from enum import Enum
from typing import Optional

class BaseEnm(Enum):

 def getCode(self):
 &amp;#34;&amp;#34;&amp;#34;根据枚举名称取状态码code

 @return: 状态码code
 &amp;#34;&amp;#34;&amp;#34;
 return self.value[0]

 def getMessage(self):
 &amp;#34;&amp;#34;&amp;#34;根据枚举名称取状态说明message

 @return: 状态说明message
 &amp;#34;&amp;#34;&amp;#34;
 return self.value[1]

 @classmethod
 def messageByCode(cls, code) -&amp;gt; Optional[str]:
 &amp;#34;&amp;#34;&amp;#34;根据状态码获取状态码说明&amp;#34;&amp;#34;&amp;#34;
 for name, member in cls.__members__.items():
 if code in member.value:
 return cls[name].getMessage()
 return None

@unique
class CallStateResult(BaseEnm):
 &amp;#34;&amp;#34;&amp;#34;通话状态结果&amp;#34;&amp;#34;&amp;#34;

 USER_STATE_NULL = (0, &amp;#34;未知的初始状态&amp;#34;)
 USER_STATE_ANSWERED = (1, &amp;#34;接通&amp;#34;)
 USER_STATE_POWER_OFF = (2, &amp;#34;关机&amp;#34;)
 USER_STATE_NOT_EXIST = (3, &amp;#34;空号&amp;#34;)
 USER_STATE_INVALID_NUM = (4, &amp;#34;非法号码&amp;#34;)
 USER_STATE_OUTSERVICE = (5, &amp;#34;停机&amp;#34;)
 USER_STATE_NOT_IN_SERVICE = (6, &amp;#34;不在服务区&amp;#34;)
 USER_STATE_NOT_ANSWER = (7, &amp;#34;无人接听&amp;#34;)
 USER_STATE_BUSY = (8, &amp;#34;用户忙&amp;#34;)
 USER_STATE_NOT_REACHABLE = (9, &amp;#34;无法接通&amp;#34;)
 USER_STATE_NOT_LOCALNUM_NEED_ZERO = (10, &amp;#34;本地号码未加零&amp;#34;)
 USER_STATE_LOCALNUM_ADD_ZERO = (11, &amp;#34;本地号码多加零&amp;#34;)
 USER_STATE_BARRING_INCOMING = (12, &amp;#34;呼入限制&amp;#34;)
 USER_STATE_CALL_REMINDER = (13, &amp;#34;来电提醒&amp;#34;)
 USER_STATE_DEFAULTING = (14, &amp;#34;欠费&amp;#34;)
 USER_STATE_LINE_BUSY = (15, &amp;#34;网络忙&amp;#34;)
 USER_STATE_FORWARDED = (16, &amp;#34;呼叫转移失败&amp;#34;)
 USER_STATE_CANNOT_CONNECTED = (17, &amp;#34;无法接听&amp;#34;)
 USER_STATE_NUMBER_CHANGE = (18, &amp;#34;改号&amp;#34;)
 USER_STATE_LINE_FAULT = (19, &amp;#34;线路故障&amp;#34;)
 USER_STATE_CALL_REJECTED = (20, &amp;#34;拒接&amp;#34;)
 USER_STATE_NOT_RECOGNITION = (21, &amp;#34;未知状态&amp;#34;)
 USER_STATE_CALL_FAILED = (22, &amp;#34;呼叫失败&amp;#34;)
 USER_STATE_HANGUP = (100, &amp;#34;通话结束&amp;#34;)


if __name__ == &amp;#39;__main__&amp;#39;:
 print(CallStateResult.USER_STATE_NULL)
 print(CallStateResult.USER_STATE_NULL.getCode())
 print(CallStateResult.USER_STATE_NULL.getMessage())
 print(CallStateResult.messageByCode(0))
&lt;/code>&lt;/pre>&lt;p>输出&lt;/p></description></item><item><title>Python 使用-gRPC详解</title><link>https://blog.ch3nnn.cn/posts/2020/grpc%E8%AF%A6%E8%A7%A3/</link><pubDate>Thu, 24 Dec 2020 09:05:00 +0800</pubDate><guid>https://blog.ch3nnn.cn/posts/2020/grpc%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="rpc-框架原理">RPC 框架原理&lt;/h2>
&lt;p>&lt;strong>RPC 框架的目标就是让远程服务调用更加简单、透明&lt;/strong>，RPC 框架负责屏蔽底层的传输方式（TCP 或者 UDP）、序列化方式（XML/Json/ 二进制）和通信细节。&lt;strong>服务调用者可以像调用本地接口一样调用远程的服务提供者，而不需要关心底层通信细节和调用过程。&lt;/strong>&lt;/p>
&lt;p>RPC 框架的调用原理图如下所示：&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2023/03/10/E4o5iRd3KuaH2Fg.png" alt="">&lt;/p>
&lt;h2 id="grpc是什么">gRPC是什么？&lt;/h2>
&lt;p>&lt;a href="https://www.grpc.io/docs/languages/python/quickstart/">官方文档-Python&lt;/a>&lt;/p>
&lt;p>gRPC是什么可以用官网的一句话来概括&lt;/p>
&lt;blockquote>
&lt;p>A high-performance, open-source universal RPC framework&lt;/p>&lt;/blockquote>
&lt;p>**所谓RPC(remote procedure call 远程过程调用)框架实际是提供了一套机制，使得应用程序之间可以进行通信，而且也遵从server/client模型。使用的时候客户端调用server端提供的接口就像是调用本地的函数一样。**如下图所示就是一个典型的RPC结构图。&lt;/p>
&lt;p>&lt;img src="https://www.grpc.io/img/landing-2.svg" alt="概念图">&lt;/p>
&lt;h2 id="grpc有什么好处以及在什么场景下需要用grpc">gRPC有什么好处以及在什么场景下需要用gRPC&lt;/h2>
&lt;p>既然是server/client模型，那么我们直接用restful api不是也可以满足吗，为什么还需要RPC呢？下面我们就来看看RPC到底有哪些优势&lt;/p>
&lt;h2 id="grpc-vs-restful-api">gRPC vs. Restful API&lt;/h2>
&lt;p>gRPC和restful API都提供了一套通信机制，用于server/client模型通信，而且它们都使用http作为底层的传输协议(严格地说, gRPC使用的http2.0，而restful api则不一定)。不过gRPC还是有些特有的优势，如下：&lt;/p>
&lt;ul>
&lt;li>gRPC可以通过protobuf来定义接口，从而可以有更加严格的接口约束条件。关于protobuf可以参见笔者之前的小文&lt;a href="https://www.jianshu.com/p/b723053a86a6">Google Protobuf简明教程&lt;/a>&lt;/li>
&lt;li>另外，通过protobuf可以将数据序列化为二进制编码，这会大幅减少需要传输的数据量，从而大幅提高性能。&lt;/li>
&lt;li>gRPC可以方便地支持流式通信(理论上通过http2.0就可以使用streaming模式, 但是通常web服务的restful api似乎很少这么用，通常的流式数据应用如视频流，一般都会使用专门的协议如HLS，RTMP等，这些就不是我们通常web服务了，而是有专门的服务器应用。）&lt;/li>
&lt;/ul>
&lt;h2 id="grpc-helloworld实例详解">gRPC HelloWorld实例详解&lt;/h2>
&lt;p>gRPC的使用通常包括如下几个步骤：&lt;/p>
&lt;ol>
&lt;li>通过protobuf来定义接口和数据类型&lt;/li>
&lt;li>编写gRPC server端代码&lt;/li>
&lt;li>编写gRPC client端代码&lt;br>
下面来通过一个实例来详细讲解上述的三步。&lt;br>
下边的hello world实例完成之后，其目录结果如下：&lt;/li>
&lt;/ol>
&lt;h3 id="定义接口和数据类型">定义接口和数据类型&lt;/h3>
&lt;ul>
&lt;li>通过protobuf定义接口和数据类型&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>syntax = &amp;#34;proto3&amp;#34;;

package rpc_package;

// define a service
service HelloWorldService {
 // define the interface and data type
 rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// define the data type of request
message HelloRequest {
 string name = 1;
}

// define the data type of response
message HelloReply {
 string message = 1;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>使用gRPC protobuf生成工具生成对应语言的库函数&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>python -m grpc_tools.protoc -I=./protos --python_out=./rpc_package --grpc_python_out=./rpc_package ./protos/user_info.proto
&lt;/code>&lt;/pre>&lt;p>这个指令会自动生成rpc_package文件夹中的&lt;code>helloworld_pb2.py&lt;/code>和&lt;code>helloworld_pb2_grpc.py&lt;/code>，但是不会自动生成&lt;code>__init__.py&lt;/code>文件，需要我们手动添加&lt;/p></description></item></channel></rss>