<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on Ch3nnn!Blog</title><link>https://blog.ch3nnn.cn/tags/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on Ch3nnn!Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Feb 2024 16:20:31 +0800</lastBuildDate><atom:link href="https://blog.ch3nnn.cn/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Protobuf 文档生成器插件</title><link>https://blog.ch3nnn.cn/posts/%E5%B7%A5%E5%85%B7-protobuf%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%99%A8%E6%8F%92%E4%BB%B6/</link><pubDate>Wed, 28 Feb 2024 16:20:31 +0800</pubDate><guid>https://blog.ch3nnn.cn/posts/%E5%B7%A5%E5%85%B7-protobuf%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%99%A8%E6%8F%92%E4%BB%B6/</guid><description>这是 Google Protocol Buffers 文档生成器插件 (protoc)。 该插件可以根据文件中的注释生成 HTML、JSON、DocBook 和 Markdown 文档。
一、前言 毫无疑问, 目前后台开发接口协议应用最广泛的除了 HTTP 之外就是 gRPC 了, HTTP 接口有成熟的swagger工具可以生成界面美观和使用友好的文档，那么对于gRPC呢？
所以通过 .proto 文件能否生成更易阅读的 HTML 接口文档？
二、安装 go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@latest 三、使用 user.proto 文件 以user.proto为例, 如下内容:
syntax = &amp;#34;proto3&amp;#34;; option go_package = &amp;#34;./pb&amp;#34;; package user; // ------------------------------------ // Messages // ------------------------------------ //--------------------------------用户-------------------------------- message SysUser { int64 id = 1; // ID string username = 2; // 用户名 string password = 3; // 密码 int64 create_at = 4; // 创建时间 int64 update_at = 5; // 修改时间 int64 delete_at = 6; // 删除时间 } message SysUserFilter { optional int64 id = 1; // ID optional string username = 2; // 用户名 optional string password = 3; // 密码 optional int64 create_at = 4; // 创建时间 optional int64 update_at = 5; // 修改时间 optional int64 delete_at = 6; // 删除时间 } message SelectSysUserListReq { int64 page = 1; // 页码 int64 page_size = 2; // 每页数量 optional SysUserFilter filter = 3; // SysUserFilter } message SelectSysUserListResp { int64 count = 1; // 总数 int64 page_count = 2; // 页码总数 repeated SysUser results = 3; // sys_user } // ------------------------------------ // Rpc Func // ------------------------------------ service User { //-----------------------用户----------------------- // 用户 列表 rpc SelectSysUserList(SelectSysUserListReq) returns (SelectSysUserListResp); } 1.</description></item></channel></rss>